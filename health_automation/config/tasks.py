from crewai import Task
import json
from health_automation.config.agents import notion_manager, health_researcher, shopping_assistant, dosage_specialist

def create_task(name, description, expected_output, agent):
    """Cria uma tarefa reutiliz√°vel com par√¢metros padronizados."""
    return Task(
        description=description,
        expected_output=expected_output,
        agent=agent,
        output_file=f"data/{name}.txt"
    )

# üîπ Tarefa 1: Extra√ß√£o de Dados do Usu√°rio no Notion
extract_user_data = create_task(
    name="extract_user_data",
    description="Ler os dados do usu√°rio no Notion e armazen√°-los para refer√™ncia futura.",
    expected_output="Arquivo com informa√ß√µes do usu√°rio incluindo email, rotina e condi√ß√µes de sa√∫de.",
    agent=notion_manager
)

# üîπ Tarefa 2: Extra√ß√£o de Suplementos do Notion
extract_supplements = create_task(
    name="extract_supplements",
    description="Extrair a tabela de suplementos do Notion e armazen√°-la para an√°lise.",
    expected_output="Arquivo contendo os suplementos do usu√°rio, incluindo nome, dosagem e hor√°rio de consumo.",
    agent=notion_manager
)

analyze_user_health = create_task(
    name="analyze_user_health",
    description=(
        "Com base nos dados de sa√∫de do usu√°rio extra√≠dos do Notion, identifique poss√≠veis conflitos "
        "entre os suplementos consumidos e as condi√ß√µes m√©dicas do usu√°rio. "
        "Sugira suplementos adicionais se necess√°rio."
    ),
    expected_output="Lista de suplementos que podem ser problem√°ticos e sugest√µes de substitui√ß√µes.",
    agent=notion_manager
)

# üîπ Tarefa 3: Pesquisa Acad√™mica sobre Suplementos
research_articles = create_task(
    name="research_articles",
    description="Buscar artigos acad√™micos para cada suplemento e enviar um email com os resultados.",
    expected_output="Emails enviados com links e resumos dos artigos cient√≠ficos para cada suplemento.",
    agent=health_researcher
)

# üîπ Tarefa 4: Buscar Suplementos na Internet
find_products = create_task(
    name="find_products",
    description="Buscar suplementos recomendados na internet e enviar um email com as op√ß√µes de compra.",
    expected_output="Emails enviados com links para comprar os suplementos recomendados.",
    agent=shopping_assistant
)


def process_each_supplement():
    """Carrega a lista de suplementos e cria uma task para cada um."""
    try:
        with open("data/extract_supplements.txt", "r", encoding="utf-8") as file:
            supplements = json.load(file)
        
        tasks = []
        for supplement in supplements:
            supplement_name = supplement["name"]

            task = create_task(
                name=f"research_articles_{supplement_name}",
                description=f"Pesquisar artigos acad√™micos sobre {supplement_name} e gerar um resumo.",
                expected_output=f"Resumo acad√™mico salvo em data/research_articles_{supplement_name}.txt",
                agent=health_researcher
            )
            tasks.append(task)

        return tasks

    except FileNotFoundError:
        print("‚ùå Arquivo de suplementos n√£o encontrado.")
        return []
    
def process_dosage_recommendations():
    """Carrega os dados do usu√°rio e suplementos para gerar recomenda√ß√µes personalizadas."""
    try:
        with open("data/extract_user_data.txt", "r", encoding="utf-8") as user_file:
            user_data = json.load(user_file)
        
        with open("data/extract_supplements.txt", "r", encoding="utf-8") as supplements_file:
            supplements = json.load(supplements_file)

        tasks = []
        for supplement in supplements:
            supplement_name = supplement["name"]
            health_condition = user_data.get("Sa√∫de", "Condi√ß√£o de sa√∫de n√£o especificada")

            task = create_task(
                name=f"dosage_recommendation_{supplement_name}",
                description=f"Buscar a dosagem recomendada de {supplement_name} para um usu√°rio com {health_condition} e enviar por email.",
                expected_output=f"Email enviado para o usu√°rio com a dosagem recomendada de {supplement_name}.",
                agent=dosage_specialist
            )
            tasks.append(task)

        return tasks

    except FileNotFoundError:
        print("‚ùå Arquivo de dados do usu√°rio ou suplementos n√£o encontrado.")
        return []

tasks = [extract_user_data, extract_supplements,analyze_user_health, research_articles, find_products]
tasks.extend(process_each_supplement())
tasks.extend(process_dosage_recommendations())

