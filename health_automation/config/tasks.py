from crewai import Task
from health_automation.config.agents import notion_manager, health_researcher, shopping_assistant

def create_task(name, description, expected_output, agent):
    """Cria uma tarefa reutilizÃ¡vel com parÃ¢metros padronizados."""
    return Task(
        description=description,
        expected_output=expected_output,
        agent=agent,
        output_file=f"data/{name}.txt",
    )

# ğŸ”¹ Tarefa 1: ExtraÃ§Ã£o de Dados do UsuÃ¡rio no Notion
extract_user_data = create_task(
    name="extract_user_data",
    description="Ler os dados do usuÃ¡rio no Notion e armazenÃ¡-los para referÃªncia futura.",
    expected_output="Arquivo com informaÃ§Ãµes do usuÃ¡rio incluindo email, rotina e condiÃ§Ãµes de saÃºde.",
    agent=notion_manager
)

# ğŸ”¹ Tarefa 2: ExtraÃ§Ã£o de Suplementos do Notion
extract_supplements = create_task(
    name="extract_supplements",
    description="Extrair a tabela de suplementos do Notion e armazenÃ¡-la para anÃ¡lise.",
    expected_output="Arquivo contendo os suplementos do usuÃ¡rio, incluindo nome, dosagem e horÃ¡rio de consumo.",
    agent=notion_manager
)

# ğŸ”¹ Tarefa 3: Pesquisa AcadÃªmica sobre Suplementos
research_articles = create_task(
    name="research_articles",
    description="Buscar artigos acadÃªmicos para cada suplemento e enviar um email com os resultados.",
    expected_output="Emails enviados com links e resumos dos artigos cientÃ­ficos para cada suplemento.",
    agent=health_researcher
)

# ğŸ”¹ Tarefa 4: Buscar Suplementos na Internet
find_products = create_task(
    name="find_products",
    description="Buscar suplementos recomendados na internet e enviar um email com as opÃ§Ãµes de compra.",
    expected_output="Emails enviados com links para comprar os suplementos recomendados.",
    agent=shopping_assistant
)

# ğŸ”¹ Lista de Tarefas sem `find_recommended_dosages`
tasks = [extract_user_data, extract_supplements, research_articles, find_products]
